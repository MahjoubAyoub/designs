#!/usr/bin/env node

import http from 'http';
import debugLib from 'debug';
import app from '../app.js';
import {AppDataSource} from '../config/data-source.js';
import { initializeSampleTemplates } from '../modules/templates/template.service.js';
import { initializeSampleTestimonials } from '../modules/testimonials/testimonial.service.js';

const debug = debugLib('backend:server');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

// Initialize TypeORM
AppDataSource.initialize()
  .then(() => {
    console.log('✅ TypeORM initialized successfully');
    // Initialize sample templates and testimonials
    initializeSampleTemplates();
    initializeSampleTestimonials();
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    console.log('✅ Server started with TypeORM at port', port);
  })
  .catch((error) => {
    console.error('❌ TypeORM initialization failed:', error);
    // Make TypeORM initialization optional
    console.log('⚠️ Continuing without database...');
  });

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
